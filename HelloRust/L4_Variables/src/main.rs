fn main() {
    println!("Hello, world!");

    let mut num1 = 5;
    println!("num1 = {}", num1);
    num1 = 6;
    println!("num1 = {}", num1);

    let spaces = "     ";
    let spaces = spaces.len();

    const MAX_POINTS: u32 = 100_000;

    let f1 = 2.0;
    let f1: f32 = 3.14;

    let em = '😍';


    let tup = (500, 3.14, "Hello Tup", (true, false));
    let (x, y, z) =  tup;
    println!("{}, {}, {}", tup.0, tup.2, tup.3.1);

    let arr: [i64; 6] = [1,2,3,4,5,6];

    // let arr: [ 0 ; 3] = [0,0,0];

}


/* 
    知识点:

    - 常量（constant），常量在绑定值以后也是不可变的，但是它与不可变的变量有很多区别：
        不可以使用mut，常量永远都是不可变的
        声明常量使用const关键字，它的类型必须被标注—常量可以在任何作用域内进行声明，包括全局作用域
        常量只可以绑定到常量表达式，无法绑定到函数的调用结果或只能在运行时才能计算出的值
    
        在程序运行期间，常量在其声明的作用域内一直有效

        命名规范：Rust里常量使用全大写字母，每个单词之间用下划线分开，例如：- MAX_POINTS


    - Shadowing（隐藏）
        可以使用相同的名字声明新的变量，新的变量就会 shadow（隐藏）之前声明的同名变量
            在后续的代码中这个变量名代表的就是新的变量.

        shadow和把变量标记为mut是不一样的
            如果不使用let关键字，那么重新给非mut的变量赋值会导致编译时错误;
            而使用let声明的同名新变量，也是不可变的;
            使用let声明的同名新变量，它的类型可以与之前不同.


    - 数据类型
        分为: 标量和复合类型
        
        Rust是静态编译语言，在编译时必须知道所有变量的类型—基于使用的值，编译器通常能够推断出它的具体类型
        但如果可能的类型比较多（例如把String转为整数的 parse方法），就必须添加类型的标注，否则编译会报错


    - 关于整数溢出
        U8的范围是0—255，如果你把一个u8变量的值设为256，那么：
            
            调试模式下编译：Rust会检查整数溢出，如果发生溢出，程序在运行时就会panic

            发布模式下（——release）编译：Rust不会检查可能导致panic的整数溢出.
                如果溢出发生：Rust会执行“环绕”操作：—256变成0，257变成1．．．
                但程序不会panic


    - 关于Rust的字符类型
        Rust 语言中char类型被用来描述语言中最基础的单个字符。
            字符类型的字面值使用单引号
            占用4字节大小
            是Unicode 标量值，可以表示比ASCII多得多的字符内容：拼音、中日韩文、零长度空白字符、emoji表情等。
                U＋0000到U＋D7FF
                U＋E000到U＋10FFFF
            但Unicode中并没有“字符”的概念，所以直觉上认为的字符也许与Rust中的概念并不相符.

    - 复合类型
        复合类型可以将多个值放在一个类型里。
        Rust 提供了两种基础的复合类型：元组（Tuple）、数组


    - Tuple
        Tuple可以将多个类型的多个值放在一个类型里Tuple 的长度是固定的：一旦声明就无法改变
        
        创建 Tuple: 在小括号里，将值用逗号分开Tuple中的每个位置都对应一个类型, Tuple中各元素的类型不必相同
        访问Tuple 的元素: 在 tuple 变量使用点标记法，后接元素的索引号
    

    - 数组
        数组也可以将多个值放在一个类型里
        数组中每个元素的类型必须相同
        数组的长度也是固定的

        关于数组的用处
            如果想让你的数据存放在stack（栈）上而不是heap（堆）上，或者想保证有固定数量的元素，这时使用数组更有好处
            数组没有Vector灵活（以后再讲）。
                Vector和数组类似，它由标准库提供
                Vector的长度可以改变
                如果你不确定应该用数组还是Vector，那么估计你应该用Vector。
        
        另一种声明数组的方法   
            如果数组的每个元素值都相同，那么可以在：—在中括号里指定初始值
            然后是一个“；” 
            最后是数组的长度 

        访问数组的元素
            数组是Stack 上分配的单个块的内存
            可以使用索引来访问数组的元素
            
        如果访问的索引超出了数组的范围，那么：
            编译会通过
            运行会报错（runtime时会 panic）
                Rust不会允许其继续访问相应地址的内存


*/